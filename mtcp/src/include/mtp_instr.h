#ifndef MTP_INSTR_H
#define MTP_INSTR_H

#include "mtcp.h"
#include "mtp_bp.h"
#include "tcp_stream.h"

/********************** MTP Instructions **********************
 * This module implements MTP instruction handling.
 * MTP instruction list:
 *  1. pkt_gen_instr
 *  2. new_ctx_instr
 *  3. flush_and_notify_instr
 *  4. timer_start_instr
 *  5. timer_cancel_instr
 *  6. timer_restart_instr
 *
 * This module is target-dependent, and won't be generated by
 * the MTP compiler.
 **************************************************************/

// pkt_gen_instr
void AddtoGenList(mtcp_manager_t mtcp, tcp_stream *cur_stream, uint32_t cur_ts);
mtp_bp* GetFreeBP(struct tcp_stream *cur_stream);

// new_ctx_instr
int CreateListenCtx(mtcp_manager_t mtcp, int sockid, int backlog);
tcp_stream* CreateCtx(mtcp_manager_t mtcp, uint32_t cur_ts,
    uint32_t remote_ip, uint32_t local_ip,
    uint16_t remote_port, uint16_t local_port,
    bool sack_permit, uint16_t mss,
    uint32_t init_seq, uint32_t send_una, uint32_t send_next, 
    uint32_t recv_init_seq, uint32_t recv_next, uint32_t last_flushed,
    uint16_t last_rwnd_remote, uint8_t wscale, uint8_t state);
void DestroyCtx(mtcp_manager_t mtcp, tcp_stream *stream, uint16_t sport);

// "buffer" instructions
void TxDataFlush(mtcp_manager_t mtcp, tcp_stream *cur_stream, 
                uint32_t offset, uint32_t len);
int FlushAndNotify(mtcp_manager_t mtcp, socket_map_t socket, 
				   tcp_stream* cur_stream, char *buf, int len);

// timer_instr
void TimerStart(mtcp_manager_t mtcp, tcp_stream *stream, uint32_t cur_ts);
void TimerCancel(mtcp_manager_t mtcp, tcp_stream *stream);
void TimerRestart(mtcp_manager_t mtcp, tcp_stream *stream, uint32_t cur_ts);

#endif
