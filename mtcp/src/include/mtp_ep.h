#ifndef MTP_EP_H
#define MTP_EP_H

#include <netinet/ip.h>

#include "mtcp.h"
#include "tcp_stream.h"
#include "socket.h"

#define MTP_NO_EVENT -1
#define MTP_SYN 0


/********************** MTP EPs & Dispatcher **********************
 * This module implements MTP Event Processors(EP), corresponding
 * EP chains, and dispatcher for events. 
 * Each EP chain is one line in the dispatcher.
 * EPs should be static while EP chains should be globally exposed.
 *
 * This module shoule be generated by the MTP compiler
 ******************************************************************/

// Event Processor Chains (tcp_strem = flow context)
int MtpSendChain(mtcp_manager_t mtcp, uint32_t cur_ts, tcp_stream *cur_stream);
void MtpAckChain(mtcp_manager_t mtcp, uint32_t cur_ts, struct tcphdr* tcph, uint32_t seq, 
	uint32_t ack_seq, int payloadlen, uint32_t window, tcp_stream* cur_stream);
void MtpDataChain(mtcp_manager_t mtcp, uint32_t cur_ts, uint32_t seq, uint8_t *payload,
	int payloadlen, tcp_stream *cur_stream);
int MtpListenChain(mtcp_manager_t mtcp, int sockid, int backlog);
struct accept_res* MtpAcceptChain(mctx_t mctx, mtcp_manager_t mtcp, struct sockaddr *addr, 
	socklen_t *addrlen, struct mtp_listen_ctx *ctx);
void MtpSynChain(mtcp_manager_t mtcp, uint32_t cur_ts, uint32_t remote_ip, uint16_t remote_port, 
	uint32_t init_seq, uint16_t rwnd, uint32_t local_ip, uint16_t local_port,
	struct tcphdr* tcph, struct mtp_listen_ctx *ctx);


// Net interfaces
// RX interface
int MTP_ProcessTransportPacket(struct mtcp_manager *mtcp, uint32_t cur_ts, const int ifidx,
    const struct iphdr* iph, int ip_len);
// TX interface
void MTP_ProcessSendEvents(mtcp_manager_t mtcp, 
    struct mtcp_sender *sender, uint32_t cur_ts, int thresh);

#endif
