#ifndef MTP_EP_H
#define MTP_EP_H

#include <netinet/ip.h>

#include "mtcp.h"
#include "tcp_stream.h"
#include "socket.h"

#define MTP_NO_EVENT -1
#define MTP_SYN 0

/********************** MTP EPs & EP Chains for Homa **********************
 * This module implements MTP Event Processors(EP), and EP chains
 * Each EP chain is one line in the dispatcher.
 * EPs should be static while EP chains should be globally exposed.
 *
 * This module shoule be generated by the MTP compiler
 *************************************************************************/

 tcp_stream* MtpHomaSendReqChainPart1(mctx_t mctx, mtcp_manager_t mtcp, uint32_t cur_ts, char* buf,
		                      size_t msg_len, uint16_t srcport, uint16_t dest_port,
							  uint32_t dest_ip, socket_map_t socket);

void MtpHomaSendReqChainPart2();

/********************** MTP EPs & EP Chains for TCP **********************
 * This module implements MTP Event Processors(EP), and EP chains
 * Each EP chain is one line in the dispatcher.
 * EPs should be static while EP chains should be globally exposed.
 *
 * This module shoule be generated by the MTP compiler
 *************************************************************************/

// Event Processor Chains (tcp_strem = flow context)
void MtpSendChain(mtcp_manager_t mtcp, uint32_t cur_ts, tcp_stream *cur_stream);

int MtpReceiveChainPart1(mtcp_manager_t mtcp, socket_map_t socket, 
						bool non_block, char *ev_buf, int ev_data_size, 
						tcp_stream *cur_stream);

void MtpReceiveChainPart2(mtcp_manager_t mtcp, uint32_t cur_ts, 
						  tcp_stream *cur_stream);

// handles received ACKs

void MtpDataChain(mtcp_manager_t mtcp, uint32_t cur_ts, uint32_t seq, uint8_t *payload,
	int payloadlen, tcp_stream *cur_stream);

int MtpListenChain(mtcp_manager_t mtcp, int sockid, int backlog);

struct accept_res* MtpAcceptChain(mctx_t mctx, mtcp_manager_t mtcp, struct sockaddr *addr, 
	socklen_t *addrlen, bool non_block, struct mtp_listen_ctx *ctx);

tcp_stream* MtpConnectChainPart1(mtcp_manager_t mtcp, uint32_t cur_ts,
					 uint32_t ev_local_ip, uint32_t ev_remote_ip, 
					 uint16_t ev_local_port, uint16_t ev_remote_port);
					 
void MtpConnectChainPart2(mtcp_manager_t mtcp, uint32_t cur_ts,
					 uint32_t ev_local_ip, uint32_t ev_remote_ip, 
					 uint16_t ev_local_port, uint16_t ev_remote_port,
					 tcp_stream *cur_stream);


void MtpTimeoutChain(mtcp_manager_t mtcp, uint32_t cur_ts, tcp_stream* cur_stream);

void MtpCloseChain(mtcp_manager_t mtcp, uint32_t cur_ts, tcp_stream* cur_stream);

void MtpFinChain(mtcp_manager_t mtcp, uint32_t cur_ts,
				 uint32_t ev_seq, uint32_t ev_payloadlen, 
				 tcp_stream* cur_stream);

#endif
