#ifndef MTP_EP_H
#define MTP_EP_H

#include <netinet/ip.h>

#include "mtcp.h"
#include "tcp_stream.h"
#include "socket.h"

#define MTP_NO_EVENT -1
#define MTP_SYN 0

#define MTP_TCP_LISTEN_ST 0
#define MTP_TCP_ACCEPT_ST 1
#define MTP_TCP_SYNACK_SENT_ST 2
#define MTP_TCP_SYN_SENT_ST 3
#define MTP_TCP_ESTABLISHED_ST 5

/********************** MTP EPs & EP Chains **********************
 * This module implements MTP Event Processors(EP), and EP chains
 * Each EP chain is one line in the dispatcher.
 * EPs should be static while EP chains should be globally exposed.
 *
 * This module shoule be generated by the MTP compiler
 *****************************************************************/

// Event Processor Chains (tcp_strem = flow context)
void MtpSendChain(mtcp_manager_t mtcp, uint32_t cur_ts, tcp_stream *cur_stream);

// handles received ACKs
void MtpAckChain(mtcp_manager_t mtcp, uint32_t cur_ts, uint32_t ack_seq,
    uint32_t window, uint32_t seq, struct tcp_opt_timestamp* ev_ts, tcp_stream* cur_stream);

void MtpDataChain(mtcp_manager_t mtcp, uint32_t cur_ts, uint32_t seq, uint8_t *payload,
	int payloadlen, tcp_stream *cur_stream);

int MtpListenChain(mtcp_manager_t mtcp, int sockid, int backlog);

struct accept_res* MtpAcceptChain(mctx_t mctx, mtcp_manager_t mtcp, struct sockaddr *addr, 
	socklen_t *addrlen, struct mtp_listen_ctx *ctx);

void MtpSynChain(mtcp_manager_t mtcp, uint32_t cur_ts, uint32_t remote_ip, uint16_t remote_port, 
	uint32_t init_seq, uint16_t rwnd, bool sack_permit, bool mss_valid, uint16_t mss,
    bool wscale_valid, uint8_t wscale, struct mtp_listen_ctx *ctx);

void MtpTimeoutChain(mtcp_manager_t mtcp, uint32_t cur_ts);

#endif
