#ifndef MTP_EP_H
#define MTP_EP_H

#include <netinet/ip.h>

#include "mtcp.h"
#include "tcp_stream.h"
#include "socket.h"

#define MTP_NO_EVENT -1
#define MTP_SYN 0


/********************** MTP EP & EP Chains **********************
 * This module implements MTP Event Processors(EP) & EP chains.
 * Each EP chain is one line in the dispatcher.
 * EPs should be static while EP chains should be globally exposed.
 *
 * This module shoule be generated by the MTP compiler
 ****************************************************************/

// Event Processor Chains
int mtp_listen_chain(mtcp_manager_t mtcp, int sockid, int backlog);
tcp_stream* mtp_accept_chain(mctx_t mctx, mtcp_manager_t mtcp, struct mtp_listen_ctx *ctx, 
	struct sockaddr *addr, socklen_t *addrlen);
int mtp_recv_chain(mtcp_manager_t mtcp, tcp_stream *cur_stream, 
	char* buf, int len, socket_map_t socket);
void mtp_ack_chain(mtcp_manager_t mtcp, uint32_t cur_ts, tcp_stream* cur_stream,
	struct tcphdr* tcph, uint32_t seq, uint32_t ack_seq, int payloadlen,
	uint32_t window);
int mtp_send_chain(mtcp_manager_t mtcp, tcp_stream *cur_stream, uint32_t cur_ts);




// 
void MTP_ProcessSendEvents(mtcp_manager_t mtcp, 
    struct mtcp_sender *sender, uint32_t cur_ts, int thresh);

int MTP_ProcessTransportPacket(struct mtcp_manager *mtcp, uint32_t cur_ts, const int ifidx,
    const struct iphdr* iph, int ip_len);

#endif
