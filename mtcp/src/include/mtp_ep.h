#ifndef MTP_EP_H
#define MTP_EP_H

#include <netinet/ip.h>

#include "mtcp.h"
#include "tcp_stream.h"
#include "socket.h"

#define MTP_NO_EVENT -1
#define MTP_SYN 0

#define MTP_TCP_LISTEN_ST 0
#define MTP_TCP_ACCEPT_ST 1
#define MTP_TCP_SYNACK_SENT_ST 2
#define MTP_TCP_SYN_SENT_ST 3
#define MTP_TCP_ESTABLISHED_ST 5
#define MTP_TCP_CLOSE_WAIT_ST 6
#define MTP_TCP_FIN_WAIT_1_ST 7
#define MTP_TCP_FIN_WAIT_2_ST 8
#define MTP_TCP_CLOSING_ST 9
#define MTP_TCP_LAST_ACK_ST 10
#define MTP_TCP_TIME_WAIT_ST 11
#define MTP_TCP_CLOSED_ST 12

#define MTP_TCP_MAX_RTX 16
#define MTP_TCP_MAX_BACKOFF	7

/********************** MTP EPs & EP Chains **********************
 * This module implements MTP Event Processors(EP), and EP chains
 * Each EP chain is one line in the dispatcher.
 * EPs should be static while EP chains should be globally exposed.
 *
 * This module shoule be generated by the MTP compiler
 *****************************************************************/

// Event Processor Chains (tcp_strem = flow context)
void MtpSendChain(mtcp_manager_t mtcp, uint32_t cur_ts, tcp_stream *cur_stream);

int MtpReceiveChainPart1(mtcp_manager_t mtcp, socket_map_t socket, 
						char *ev_buf, int ev_data_size, 
						tcp_stream *cur_stream);

void MtpReceiveChainPart2(mtcp_manager_t mtcp, uint32_t cur_ts, 
						  tcp_stream *cur_stream);

// handles received ACKs
void MtpAckChain(mtcp_manager_t mtcp, uint32_t cur_ts, uint32_t ack_seq,
    uint32_t window, uint32_t seq, struct tcp_opt_timestamp* ev_ts, tcp_stream* cur_stream);

void MtpDataChain(mtcp_manager_t mtcp, uint32_t cur_ts, uint32_t seq, uint8_t *payload,
	int payloadlen, tcp_stream *cur_stream);

int MtpListenChain(mtcp_manager_t mtcp, int sockid, int backlog);

struct accept_res* MtpAcceptChain(mctx_t mctx, mtcp_manager_t mtcp, struct sockaddr *addr, 
	socklen_t *addrlen, bool non_block, struct mtp_listen_ctx *ctx);

tcp_stream* MtpConnectChainPart1(mtcp_manager_t mtcp, uint32_t cur_ts,
					 uint32_t ev_local_ip, uint32_t ev_remote_ip, 
					 uint16_t ev_local_port, uint16_t ev_remote_port);
					 
void MtpConnectChainPart2(mtcp_manager_t mtcp, uint32_t cur_ts,
					 uint32_t ev_local_ip, uint32_t ev_remote_ip, 
					 uint16_t ev_local_port, uint16_t ev_remote_port,
					 tcp_stream *cur_stream);

void MtpSynChain(mtcp_manager_t mtcp, uint32_t cur_ts, uint32_t remote_ip, uint16_t remote_port, 
	uint32_t init_seq, uint16_t rwnd, bool sack_permit, bool mss_valid, uint16_t mss,
    bool wscale_valid, uint8_t wscale, struct tcp_opt_timestamp *ev_ts, 
	struct mtp_listen_ctx *ctx);

void MtpSyNAckChain(mtcp_manager_t mtcp, uint32_t cur_ts, 
					uint32_t ev_init_seq, uint32_t ev_ack_seq, 
					uint16_t ev_rwnd_size, bool ev_sack_permit, 
					bool ev_mss_valid, uint16_t ev_mss, 
                    bool ev_wscale_valid, uint8_t ev_wscale,
					struct tcp_opt_timestamp* ev_ts, 
					tcp_stream* cur_stream);

void MtpTimeoutChain(mtcp_manager_t mtcp, uint32_t cur_ts, tcp_stream* cur_stream);

void MtpCloseChain(mtcp_manager_t mtcp, uint32_t cur_ts, tcp_stream* cur_stream);

void MtpFinChain(mtcp_manager_t mtcp, uint32_t cur_ts,
				 uint32_t ev_seq, uint32_t ev_payloadlen, 
				 tcp_stream* cur_stream);

#endif
